---
title: "Tidyverse Programming in R"
format: pdf
editor: visual
---

```{r}
#Requiring libraries
library(tidyverse)
library(palmerpenguins)
```

\newpage

## Task One: Reading in the data

### Question a: Reading in `data.txt` file

```{r}
?read_csv
```

CSV stands for Comma Separated Values. The data contained in the file data.txt are not comma delimited (they are semicolon delimited), so therefore we cannot use the function read_csv to read in this data file. 

```{r}
data <- read_delim("data/data.txt", #name and path of the data file
                   delim = "; ", #setting "; " as the delimiter
                   col_types = "ddd" #assigning all columns as double
                   )
data #displaying the data
```

### Question b: Reading in `data2.txt` file

```{r}
data2 <- read_delim("data/data2.txt", #name and path of the data file
                   delim = "6", #setting "6" as the delimiter
                   col_types = "fdc") #assigning columns as x=factor, y=double, z=character
data2 #displaying the data
```

\newpage

## Task Two: Trailblazer data

### Question a: Reading in the `trailblazer` data and using `glimpse` to check

```{r}
trailblazer <- read_csv("data/trailblazer.csv") #using read_csv function to read data

glimpse(trailblazer) #glimpsing the data
```

### Question b: Pivoting the data

```{r}
trailblazer_longer <- trailblazer |> #starting with the original trailblazer dataset
  pivot_longer(cols = 2:11, #holding the Player column constant and pivoting the rest
               names_to = "GameLocation", #temporary column of both Game and Location
               values_to = "Points") |>
  #Splitting the temporary GameLocation column into two columns using the "_" delimiter
  separate_wider_delim(cols = GameLocation,
                        delim = "_",
                        names = c("Game", "Location"))

glimpse(trailblazer_longer) #looking at the data
```

### Question c: Finding whether players scored more during home or away games

```{r}
trailblazer_scoring <- trailblazer_longer |>
  pivot_wider(names_from = Location, values_from = Points) |> #Creating a 90 x4 dataset
  group_by(Player) |> #grouping by Player
  mutate(mean_home = mean(Home, na.rm = TRUE)) |> #new column for mean home points
  mutate(mean_away = mean(Away, na.rm = TRUE)) |> #new column for mean away points
  mutate(mean_diff = mean_home - mean_away) |> #new column for points difference home-away
  arrange(desc(mean_diff)) #sorting by descending mean difference
```

On average, Jusuf Nurkic, Robert Covington, Nassir Little, Damian Lillard and Cody Zeller scored more points in home games than away through the first 10 days. 

\newpage

## Task Three: Manipulating the Penguins datasets

### Question a: Reviewing a coworker's data pivot

```{r, include=FALSE}
penguins <- penguins

peng <- penguins |>
  select(species, island, bill_length_mm) |>
  pivot_wider(names_from = island, values_from = bill_length_mm)
```

`<NULL>` means that there aren't any of that penguin species found on that island because the list of bill lengths is empty.

`<dbl [52]>` means that the list contains 52 elements and that the data type of the elements is double. 

`<list>` means that elements of the Torgersen, Biscoe, and Dream are list structures. 

### Question b: Creating the correct penguins data table

```{r}
penguins_correct <- penguins |>
  select(species, island) |> #selecting relevant columns
  group_by(species, island) |> #grouping by species and island
  summarise(n = n()) |> #creating a count column called n
  pivot_wider(names_from = island, values_from = n) |> #pivoting to a wide dataset
  mutate(across(where(is.numeric), coalesce, 0)) #converting NA values to 0 using coalesce

penguins_correct
```

\newpage

## Task Four: Replacing `NA` values in the penguins dataset

```{r}
penguins |>
  mutate(bill_length_mm = 
           case_when(is.na(bill_length_mm) & species == "Adelie" ~ 26, #Adelie NA value
                     is.na(bill_length_mm) & species == "Gentoo" ~ 30, #Gentoo NA value
                     TRUE ~ bill_length_mm)) |> #all other rows keep the bill length value
  arrange(bill_length_mm) #sorting by ascending bill length
```
